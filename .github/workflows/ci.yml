---
name: Build

on:
  push:
    branches: [main]
    paths:
      - cmake/**
      - src/**
      - CMakeLists.txt
      - ".github/workflows/ci.yml"
    tags:
      - "*"
  pull_request:
    branches:
      - "main"
    types: [opened, reopened]
    paths:
      - cmake/**
      - src/**
      - CMakeLists.txt'
      - ".github/workflows/ci.yml"
  release:
    types: [published]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  TARGET_NAME: jmbde-models
  BUILD_TYPE: RelWithDebInfo
  DISPLAY: ":99"
  CTEST_OUTPUT_ON_FAILURE: 1
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  QT5_VERSION: "5.15.2"
  QT_VERSION: "6.5.0"
  QT_TARGET: "desktop"
  TEST_QT_VERSION: "6.5.0"
  TEST_QT_ARCH: "gcc_64"
  TEST_ARCH: "amd_64"
  TEST_ARTIFACT: "Ubuntu-gcc"
  TEST_CC: "clang"
  TEST_CXX: "clang++"
  TEST_BUILD_TYPE: Debug

jobs:
  macos-build:
    name: "üçé ${{ matrix.os }} -${{ matrix.qt_version}}"
    strategy:
      matrix:
        os: [macos-latest]
        platform: [macos-latest]
        name: [macos-12.0-x86_64]
        macos_target: [10.15]
        qt_arch: [clang_64]
        arch: [clang_64]
        cc: [clang]
        cxx: [clang++]
        cmake_generator: [Ninja]

      fail-fast: true

    runs-on: ${{ matrix.os }}
    needs: [tests]

    steps:
      - name: "‚öôÔ∏è Get the version"
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: "üß∞ Checkout Source Code"
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: "‚öôÔ∏è Cache Qt"
        id: cache-qt
        uses: actions/cache@v3.3.2 # not v2!
        with:
          path: "${{ github.workspace }}/Qt"
          key: QtCache-${{ matrix.platform }}-{{ matrix.arch }}-${{ env.QT_VERSION }}

      - name: "‚öôÔ∏è Install Qt"
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          target: ${{ env.QT_TARGET }}
          arch: ${{ matrix.qt_arch }}
          # modules: 'qtscript'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: "‚öôÔ∏è Install dependencies"
        run: |
          brew install ninja

      - name: "‚öôÔ∏è Get conan"
        id: conan
        uses: turtlebrowser/get-conan@v1.2

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: "‚öôÔ∏è Configure cmake build"
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: |
          cmake $GITHUB_WORKSPACE \
            -G ${{matrix.cmake_generator}} \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=${{ matrix.macos_target }} \
            -DUSE_LAUNCHER_ABSOLUTE_PATH:BOOL=OFF \
            -DCMAKE_INSTALL_PREFIX:PATH=./app \
            -DBUILD_TESTING=OFF  \
            -DBUILD_TRANSLATIONS=ON \

      - name: "üöß Build"
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --target install --parallel $(sysctl -n hw.logicalcpu)

      - name: "üì¶ Package application (macdeployqt and zipfile)"
        working-directory: ${{runner.workspace}}/build
        run: |
          macdeployqt ./app/${{env.TARGET_NAME}}.app -qmldir=. -appstore-compliant -libpath=./app/${{env.TARGET_NAME}}.app/Contents/Frameworks -verbose=1 -dmg
          cp ./app/${{env.TARGET_NAME}}.dmg ${{runner.workspace}}/${{env.TARGET_NAME}}.dmg

          # ZIP application "%AppName%-%Version%-macOS.zip"
          ditto -c -k --sequesterRsrc --keepParent "bin/${{env.TARGET_NAME}}.app" ${{env.TARGET_NAME}}.zip
          cp ./${{env.TARGET_NAME}}.zip ${{runner.workspace}}/${{env.TARGET_NAME}}.zip

      - name: Upload dmg artifact for macOS - ${{ matrix.qt_version }}
        uses: actions/upload-artifact@v3
        with:
          name: ${env.TARGET_NAME}-dmg
          path: ${{runner.workspace}}/${{ env.TARGET_NAME }}.dmg

      - name: Upload zip artifact for macOS - ${{ matrix.qt_version }}-${env.BUILD_TYPE}}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.TARGET_NAME }}-macos-zip
          path: ${{runner.workspace}}/${{ env.TARGET_NAME }}*.zip

  windows-build:
    name: "üßä ${{ matrix.platform }} ${{matrix.qt_version}}"
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [windows-latest]
        name: [Windows 2019 MS Visual C]
        qt_arch: [win64_msvc2019_64]
        arch: [x64]
        artifact: [Windows-MSVC]
        pak_arch: [win64]
        cc: [cl]
        cxx: [cl]
        cmake_generator: [Ninja]
      fail-fast: true
    needs: [tests]

    steps:
      - name: Get the version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Checkout Source Code
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Restoring submodules
        run: git submodule update --init

      - name: "‚öôÔ∏è Configure MSVC"
        uses: ilammy/msvc-dev-cmd@v1
        with:
          # 14.1 is for vs2017, 14.2 is vs2019, following the upstream vcpkg build
          toolset: 14.2
          arch: ${{ matrix.pak_arch }}

      - name: "‚öôÔ∏è Cache Qt"
        id: cache-qt
        uses: actions/cache@v3.3.2 # not v2!
        with:
          path: "${{ github.workspace }}/Qt"
          key: QtCache-${{ matrix.platform }}-{{ matrix.arch }}-${{ env.QT_VERSION }}

      - name: "‚öôÔ∏è Install Qt"
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          target: ${{ env.QT_TARGET }}
          arch: ${{ matrix.qt_arch }}
          # modules: 'qtscript'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: "‚öôÔ∏è Get conan"
        id: conan
        uses: turtlebrowser/get-conan@v1.2

      - name: "‚öôÔ∏è Install Build deps"
        run: |
          choco install png2ico
          choco install ninja

      - name: "üöß Compile application"
        shell: bash
        working-directory: ${{ runner.workspace }}/build
        run: |
          cmake ${{ github.workspace }} \
            -G ${{ matrix.cmake_generator }} \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}  \
            -DCMAKE_INSTALL_PREFIX:PATH=./programs \
            -DBUILD_TESTING=OFF  \
            -DBUILD_TRANSLATIONS=ON

      - name: "‚öôÔ∏è Run CMake Install"
        shell: pwsh
        working-directory: build
        run: cmake --build . --config ${{ env.BUILD_TYPE }} --target install --parallel $(nproc)

      # Copy Qt DLLs, compiler runtime & application icon
      - name: "üì¶ Package application (windeployqt)"
        working-directory: build
        shell: pwsh
        env:
          archiveName: ${{ env.TARGET_NAME}}.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.arch }}
        run: |
          New-Item -ItemType Directory ${{ env.archiveName }}
          Copy-Item -PATH ./programs/* -Destination ${{ env.archiveName }} -Recurse
          Get-ChildItem ${{ env.archiveName }}/bin
          windeployqt --qmldir . ${{ env.archiveName }}/bin/${{ env.TARGET_NAME}}.exe ${{ env.archiveName }}/bin/${{ env.TARGET_NAME}}models.dll ${{ env.archiveName }}/bin/${{ env.TARGET_NAME}}quick.dll ${{ env.archiveName }}/bin/${{ env.TARGET_NAME}}widgets.dll

      - name: Compress Zip Archive
        working-directory: build
        shell: pwsh
        env:
          archiveName: ${{ env.TARGET_NAME}}.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.arch }}
        run: |
          Compress-Archive -Path ${{ env.archiveName}}/bin -DestinationPath ${{runner.workspace}}/${{ env.archiveName}}.'zip'

      - name: Upload Zip archive
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.TARGET_NAME}}-win-zip
          path: ${{ runner.workspace}}/${{ env.archiveName}}.zip

      - name: "üì¶ Make ISS-Installer for ${{ matrix.qt_version }}"
        working-directory: build
        shell: bash
        env:
          archiveName: ${{ env.TARGET_NAME}}.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.arch }}
        run: |
          iscc $GITHUB_WORKSPACE/packaging/win/installer_Qt6_x64.iss -DMyAppVersion=${{ steps.get_version.outputs.VERSION }} -DMyProjectRoot=${{runner.workspace}} -DMyOutRoot=$GITHUB_WORKSPACE/build//${archiveName}/bin

      - name: "üì§ Upload artifact: ISS Installer"
        uses: actions/upload-artifact@v3
        env:
          archiveName: ${{ env.TARGET_NAME}}.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.arch }}
        with:
          name: ${{ env.TARGET_NAME}}-win
          path: ${{runner.workspace}}/${{ env.archiveName}}.exe

  source-archive:
    name: All Source Files
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Restoring submodules
        run: git submodule update --init

      - name: Get the version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Checking out sources
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Create 7z source-archive
        uses: DuckSoft/create-7z-action@v1.0
        with:
          pathSource: ./
          pathTarget: ./jmbde-qt-${{ steps.get_version.outputs.VERSION }}-source-all.7z

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: source-files
          path: jmbde-qt-${{ steps.get_version.outputs.VERSION }}-source-all.7z

  tests:
    name: Tests on ubuntu-latest
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        name: [Ubuntu-20.04 gcc-10]
        qt_arch: [gcc_64]
        arch: [amd64]
        artifact: [Ubuntu-gcc]
        cmake_generator: [Ninja]
        build_type: [Debug]
      fail-fast: true

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: "‚öôÔ∏è Install dependencies"
        run: |
          sudo apt-get -y -qq update
          sudo apt-get -y --no-install-recommends install \
              ninja-build

      - name: "‚öôÔ∏è Cache Qt"
        id: cache-qt
        uses: actions/cache@v3.3.2 # not v2!
        with:
          path: "${{ github.workspace }}/Qt"
          key: ${{ runner.os }}-${{ env.QT_VERSION }}-${{ env.QT_TARGET }}-QtCache

      - name: "‚öôÔ∏è Install Qt"
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          target: ${{ env.QT_TARGET }}
          arch: ${{ matrix.qt_arch }}
          # modules: 'qtscript'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: "‚öôÔ∏è Get conan"
        id: conan
        uses: turtlebrowser/get-conan@v1.2

      - name: Xvfb run for ${{ runner.os }}
        run: |
          Xvfb -ac ${{ env.DISPLAY }} -screen 0 1280x780x24 &

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/build

        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: |
          cmake ${{ github.workspace }} \
            -G ${{matrix.cmake_generator}} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type}} \
            -DCMAKE_INSTALL_PREFIX:PATH=$(pwd)/app \
            -DBUILD_TESTING=ON  \
            -DBUILD_TRANSLATIONS=ON

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build . --config Debug -j$(nproc)

      - name: Test
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -VV -C ${{ matrix.build_type}}

  releaseNotes:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: upload
    steps:
      - name: Build Releasenotes
        id: github_releasenotes
        uses: release-drafter/release-drafter@v5
        with:
          publish: "${{ steps.check-version.outputs.tag != '' }}"
          tag: "${{ steps.check-version.outputs.tag }}"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

  changeLog:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: upload
    steps:
      - name: Build ChangeLog
        id: github_changelog
        uses: mikepenz/release-changelog-builder-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: ${{ steps.check-version.outputs }}
        env:
          GITHUB_TOKEN: $${{ secrets.GITHUB_TOKEN }}

  # Upload continuous build
  upload-prereleases:
    name: "üóÇ Create pre-release and upload artifacts"
    environment: PreRelease
    needs:
      - macos-build
      - windows-build
      - source-archive

    runs-on: ubuntu-latest

    steps:
      - name: Get the version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: "üì• Download artifacts"
        uses: actions/download-artifact@v3

      - name: "üóÇ Inspect directory after downloading artifacts"
        run: ls -alFR

      - name: "üì§ Upload Release: macOS-zip"
        if: github.ref == 'refs/heads/master'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}${env.TARGET_NAME}-zip/${{env.TARGET_NAME}}.zip
          asset_name: ${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}-macos.zip
          tag: ${{ github.ref }}
          overwrite: true

      - name: "üì§ Upload Release: macOS"
        if: github.ref == 'refs/heads/master'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}${env.TARGET_NAME}-dmg/${{env.TARGET_NAME}}.dmg
          asset_name: ${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}.dmg
          tag: ${{ github.ref }}
          overwrite: true

      - name: "üì§ Upload Release: windows"
        if: github.ref == 'refs/heads/master'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./${{ env.TARGET_NAME }}.exe
          asset_name: ${{ env.TARGET_NAME}}${{ steps.get_version.outputs.VERSION }}-win64.exe
          tag: ${{ github.ref }}
          overwrite: true

      - name: "üì§ Upload Release: zip for windows"
        if: github.ref == 'refs/heads/master'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./${{ env.archiveName }}-win.zip
          asset_name: ${{ env.TARGET_NAME}}-win-${{ steps.get_version.outputs.VERSION }}-win.zip
          tag: ${{ github.ref }}
          overwrite: true

      - name: Upload source archive
        if: github.ref == 'refs/heads/master'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: jmbde-qt-${{ steps.get_version.outputs.VERSION }}-source-all.7z
          asset_name: jmbde-qt-${{ steps.get_version.outputs.VERSION }}-source-all.7z
          tag: ${{ github.ref }}
          overwrite: true

  # Upload continuous build
  upload:
    name: "üóÇ Create release and upload artifacts"
    environment: Release
    needs:
      - macos-build
      - windows-build
      - source-archive

    runs-on: ubuntu-latest
    steps:
      - name: "üì• Download artifacts"
        uses: actions/download-artifact@v3
      - name: "üóÇ Inspect directory after downloading artifacts"
        run: ls -alFR

      - name: "üì§ Upload Release: macOS-zip"
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}${env.TARGET_NAME}-zip/${{env.TARGET_NAME}}.zip
          asset_name: ${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}-macos.zip
          tag: ${{ github.ref }}
          overwrite: true

      - name: "üì§ Upload Release: macOS"
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}${env.TARGET_NAME}-dmg/${{env.TARGET_NAME}}.dmg
          asset_name: ${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}.dmg
          tag: ${{ github.ref }}
          overwrite: true

      - name: "üì§ Upload Release: windows"
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./${{ env.TARGET_NAME }}.exe
          asset_name: ${{ env.TARGET_NAME}}${{ steps.get_version.outputs.VERSION }}-win64.exe
          tag: ${{ github.ref }}
          overwrite: true

      - name: "üì§ Upload Release: zip for windows"
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./${{ env.archiveName }}-win.zip
          asset_name: ${{ env.TARGET_NAME}}-win-${{ steps.get_version.outputs.VERSION }}-win.zip
          tag: ${{ github.ref }}
          overwrite: true

      - name: Upload source archive
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: jmbde-qt-${{ steps.get_version.outputs.VERSION }}-source-all.7z
          asset_name: jmbde-qt-${{ steps.get_version.outputs.VERSION }}-source-all.7z
          tag: ${{ github.ref }}
          overwrite: true
